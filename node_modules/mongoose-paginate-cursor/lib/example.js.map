{"version":3,"sources":["../src/example.js"],"names":["debug","error","mongoose","Promise","db","connection","on","err","once","connect","rand","Math","floor","random","FooSchema","Schema","count","type","Number","default","plugin","Pagination","Foo","model","setInterval","foo","create","e","sinceId","process","stdin","text","paginate","limit","reverse","orderKey","filter","nextCursor","objects"],"mappings":";;AAGA;;;;AACA;;;;AACA;;;;;;2cALA;;;;;AAOA,MAAMA,QAAQ,qBAAO,6BAAP,CAAd;AACA,MAAMC,QAAQ,qBAAO,wBAAP,CAAd;AACAC,mBAASC,OAAT,GAAmBA,OAAnB,C,CAA4B;;AAE5B,MAAMC,KAAKF,mBAASG,UAApB;;AAEAD,GAAGE,EAAH,CAAM,OAAN,EAAeC,OAAON,MAAM,sBAAN,EAA8BM,GAA9B,CAAtB;;AAEAH,GAAGI,IAAH,CAAQ,MAAR,EAAgB,MAAM;AACpBR,QAAM,2BAAN;AACD,CAFD;;AAIAE,mBAASO,OAAT,CAAiB,8BAAjB;;AAEA,MAAMC,OAAO,MAAMC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,GAA3B,CAAnB;AACA,MAAMC,YAAY,IAAIC,gBAAJ,CAAW,EAAEC,OAAO,EAAEC,MAAMC,MAAR,EAAgBC,SAAST,IAAzB,EAAT,EAAX,CAAlB;AACAI,UAAUM,MAAV,CAAiBC,oBAAjB;AACA,MAAMC,MAAMpB,mBAASqB,KAAT,CAAe,KAAf,EAAsBT,SAAtB,CAAZ;;AAEAU,8BAAY,aAAW;AACrBxB,QAAM,iBAAN;AACA,MAAI;AACF,UAAMyB,MAAM,MAAMH,IAAII,MAAJ,CAAW,EAAX,CAAlB;AACA1B,UAAM,SAAN,EAAiByB,GAAjB;AACD,GAHD,CAGE,OAAOE,CAAP,EAAU;AACV1B,UAAM0B,CAAN;AACD;AACF,CARD,GAQG,KARH;;AAUA,IAAIC,UAAU,IAAd;AACAC,QAAQC,KAAR,CAAcxB,EAAd,CAAiB,MAAjB;AAAA,gCAAyB,WAAMyB,IAAN,EAAe;AACtC/B,UAAM,OAAN,EAAe+B,IAAf;AACA,QAAI;AAAA,kBAC8B,MAAMT,IAAIU,QAAJ,CAAa;AACjDC,eAAO,CAD0C;AAEjDL,wBAFiD;AAGjDM,iBAAS,KAHwC;AAIjDC,kBAAU,OAJuC;AAKjDC,gBAAQ;AAAA,iBAAOzB,KAAKE,MAAL,KAAgB,GAAvB;AAAA;AALyC,OAAb,CADpC;;AAAA,YACMwB,UADN,SACMA,UADN;AAAA,YACkBC,OADlB,SACkBA,OADlB;;AAQFV,gBAAUS,UAAV;AACArC,YAAM,OAAN,EAAe,EAAEsC,gBAAF,EAAWD,sBAAX,EAAf;AACD,KAVD,CAUE,OAAOV,CAAP,EAAU;AACV1B,YAAM0B,CAAN;AACD;AACF,GAfD;;AAAA;AAAA;AAAA;AAAA","file":"example.js","sourcesContent":["/**\n * Created by david on 9/22/16.\n */\nimport mongoose, { Schema } from 'mongoose';\nimport _debug from 'debug';\nimport Pagination from './Pagination';\n\nconst debug = _debug('paginationCursor:connection');\nconst error = _debug('paginationCursor:error');\nmongoose.Promise = Promise; // ES6 Promise\n\nconst db = mongoose.connection;\n\ndb.on('error', err => error('connection error: %o', err));\n\ndb.once('open', () => {\n  debug('connection opened with DB');\n});\n\nmongoose.connect('mongodb://localhost/PageTest');\n\nconst rand = () => Math.floor(Math.random() * 500);\nconst FooSchema = new Schema({ count: { type: Number, default: rand } });\nFooSchema.plugin(Pagination);\nconst Foo = mongoose.model('Foo', FooSchema);\n\nsetInterval(async() => {\n  debug('will create new');\n  try {\n    const foo = await Foo.create({});\n    debug('created', foo);\n  } catch (e) {\n    error(e);\n  }\n}, 10000);\n\nlet sinceId = null;\nprocess.stdin.on('data', async(text) => {\n  debug('input', text);\n  try {\n    const { nextCursor, objects } = await Foo.paginate({\n      limit: 5,\n      sinceId,\n      reverse: false,\n      orderKey: 'count',\n      filter: () => (Math.random() > 0.1),\n    });\n    sinceId = nextCursor;\n    debug('paged', { objects, nextCursor });\n  } catch (e) {\n    error(e);\n  }\n});\n"]}