'use strict';

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _debug2 = require('debug');

var _debug3 = _interopRequireDefault(_debug2);

var _Pagination = require('./Pagination');

var _Pagination2 = _interopRequireDefault(_Pagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Created by david on 9/22/16.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */


const debug = (0, _debug3.default)('paginationCursor:connection');
const error = (0, _debug3.default)('paginationCursor:error');
_mongoose2.default.Promise = Promise; // ES6 Promise

const db = _mongoose2.default.connection;

db.on('error', err => error('connection error: %o', err));

db.once('open', () => {
  debug('connection opened with DB');
});

_mongoose2.default.connect('mongodb://localhost/PageTest');

const rand = () => Math.floor(Math.random() * 500);
const FooSchema = new _mongoose.Schema({ count: { type: Number, default: rand } });
FooSchema.plugin(_Pagination2.default);
const Foo = _mongoose2.default.model('Foo', FooSchema);

setInterval(_asyncToGenerator(function* () {
  debug('will create new');
  try {
    const foo = yield Foo.create({});
    debug('created', foo);
  } catch (e) {
    error(e);
  }
}), 10000);

let sinceId = null;
process.stdin.on('data', (() => {
  var _ref2 = _asyncToGenerator(function* (text) {
    debug('input', text);
    try {
      var _ref3 = yield Foo.paginate({
        limit: 5,
        sinceId: sinceId,
        reverse: false,
        orderKey: 'count',
        filter: function filter() {
          return Math.random() > 0.1;
        }
      });

      const nextCursor = _ref3.nextCursor,
            objects = _ref3.objects;

      sinceId = nextCursor;
      debug('paged', { objects: objects, nextCursor: nextCursor });
    } catch (e) {
      error(e);
    }
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})());
//# sourceMappingURL=example.js.map